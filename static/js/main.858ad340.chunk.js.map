{"version":3,"sources":["firebase.js","components/LinksForm.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LinksForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","data","useEffect","currentId","onSubmit","preventDefault","str","RegExp","test","toast","type","autoClose","addOrEditLink","className","placeholder","onChange","rows","Links","links","setLinks","setCurrentId","getLinks","onSnapshot","querySnapshot","docs","forEach","push","onDeleteLink","window","confirm","delete","linkObject","set","update","console","error","map","link","key","onClick","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.858ad340.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDy39LpwupprUdn0Ck_5_K2Gyh3kW1lwtk\",\r\n    authDomain: \"react-appcrud.firebaseapp.com\",\r\n    databaseURL: \"https://react-appcrud.firebaseio.com\",\r\n    projectId: \"react-appcrud\",\r\n    storageBucket: \"react-appcrud.appspot.com\",\r\n    messagingSenderId: \"352769802403\",\r\n    appId: \"1:352769802403:web:426cfd2fa404cb0989bf16\",\r\n};\r\n// Initialize Firebase\r\nconst fb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = fb.firestore();","import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst LinksForm = (props) => {\r\n  const initialStateValues = {\r\n    url: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const [values, setValues] = useState(initialStateValues);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const validURL = (str) => {\r\n    var pattern = new RegExp(\r\n      \"^(https?:\\\\/\\\\/)?\" + // protocol\r\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\r\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\r\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\r\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\r\n        \"(\\\\#[-a-z\\\\d_]*)?$\",\r\n      \"i\"\r\n    ); // fragment locator\r\n    return !!pattern.test(str);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validURL(values.url)) {\r\n      return toast(\"invalid url\", { type: \"warning\", autoClose: 1000 });\r\n    }\r\n\r\n    props.addOrEditLink(values);\r\n    setValues({ ...initialStateValues });\r\n  };\r\n\r\n  const getLinkById = async (id) => {\r\n    const doc = await db.collection(\"links\").doc(id).get();\r\n    setValues({ ...doc.data() });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.currentId === \"\") {\r\n      setValues({ ...initialStateValues });\r\n    } else {\r\n      getLinkById(props.currentId);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.currentId]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"card card-body border-primary\">\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">insert_link</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"URL\"\r\n          value={values.url}\r\n          name=\"url\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">create</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          value={values.name}\r\n          name=\"name\"\r\n          placeholder=\"Sitio Web\"\r\n          className=\"form-control\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <textarea\r\n          rows=\"3\"\r\n          className=\"form-control\"\r\n          placeholder=\"Descripcion\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleInputChange}\r\n        ></textarea>\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary btn-block\">\r\n        {props.currentId === \"\" ? \"Guardar\" : \"Actualizar\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LinksForm;","import React, { useEffect, useState } from \"react\";\r\nimport LinksForm from \"./LinksForm\";\r\n\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Links = () => {\r\n  const [links, setLinks] = useState([]);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n\r\n  const getLinks = async () => {\r\n    db.collection(\"links\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setLinks(docs);\r\n    });\r\n  };\r\n\r\n  const onDeleteLink = async (id) => {\r\n    if (window.confirm(\"Estas seguro que quieres eliminar este Link?\")) {\r\n      await db.collection(\"links\").doc(id).delete();\r\n      toast(\"Link eliminado correctamente.\", {\r\n        type: \"error\",\r\n        autoClose: 2000\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLinks();\r\n  }, []);\r\n\r\n  const addOrEditLink = async (linkObject) => {\r\n    try {\r\n      if (currentId === \"\") {\r\n        await db.collection(\"links\").doc().set(linkObject);\r\n        toast(\"Nuevo Link Agregado\", {\r\n          type: \"success\",\r\n        });\r\n      } else {\r\n        await db.collection(\"links\").doc(currentId).update(linkObject);\r\n        toast(\"Link actualizado correctamente\", {\r\n          type: \"info\",\r\n        });\r\n        setCurrentId(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-4 p-2\">\r\n        <LinksForm {...{ addOrEditLink, currentId, links }} />\r\n      </div>\r\n      <div className=\"col-md-8 p-2\">\r\n        {links.map((link) => (\r\n          <div className=\"card mb-1\" key={link.id}>\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4>{link.name}</h4>\r\n                <div>\r\n                  <i\r\n                    className=\"material-icons text-danger\"\r\n                    onClick={() => onDeleteLink(link.id)}\r\n                  >\r\n                    close\r\n                  </i>\r\n                  <i\r\n                    className=\"material-icons\"\r\n                    onClick={() => setCurrentId(link.id)}\r\n                  >\r\n                    create\r\n                  </i>\r\n                </div>\r\n              </div>\r\n              <p>{link.description}</p>\r\n              <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">Ir al Sitio Web</a>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Links;","  \nimport React from \"react\";\nimport Links from \"./components/Links\";\nimport \"./App.css\";\n\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <Links />\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}